
import java.util.*;

public class Solution {

    
    public static String cycleDetection(int[][] edges, int n, int m) {
        // Write your code here.
        
        Solution obj = new Solution();
        
        
     List<Integer> Graph[] = new LinkedList[n+1];
        int visited[] = new int[n+1];
        
        for(int i = 0;i<=n;i++)
        {
            visited[i] = 0;
        }
        
        for(int i = 0; i <= n; i++)
        {
            Graph[i] = new LinkedList<Integer>();
        }
         
        for(int i = 0; i < m; i++)
        {
            int a = edges[i][0];
            int b = edges[i][1];
            
            
            Graph[a].add(b);
            Graph[b].add(a);
        }
        
     for(int i = 1;i<=n;i++)
     {
         if(visited[i] == 0)
         {
             boolean result = obj.BFS(i, Graph, visited);
             
             if(result == true)
             {
                 return "Yes";
             }
         }
     }
        
        return "No";      
    }
        
    boolean BFS(int n, List<Integer> Graph[], int visited[])
    {
        Queue<Integer> q = new LinkedList<>();
        q.add(n);
        
        
        while(q.size()>0)
        {
           int curr = q.peek();
            
            if(visited[curr] == 1)
            {
                return true;
            }
  
            q.remove();
            visited[curr] = 1;
            
            for(int x : Graph[curr])
            {
                if(visited[x] == 0)
                {
                   q.add(x);
                  
                }
            }
            
        
        }
        
        return false;
        
    }
    
    
    
}
